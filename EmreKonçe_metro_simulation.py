# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1riFHszKU2tgbOP05y7VKQdk_xGUggOFy
"""

from collections import defaultdict, deque
import heapq
from typing import Dict, List, Set, Tuple, Optional
import math

class Istasyon:
    def __init__(self, idx: str, ad: str, hat: str, x: float, y: float):
        self.idx = idx
        self.ad = ad
        self.hat = hat
        self.x = x  # Koordinatlar eklendi
        self.y = y
        self.komsular: List[Tuple['Istasyon', int]] = []  # (istasyon, süre) tuple'ları

    def komsu_ekle(self, istasyon: 'Istasyon', sure: int):
        self.komsular.append((istasyon, sure))

    def heuristik(self, hedef: 'Istasyon') -> float:
        """İki istasyon arasındaki Euclidean mesafeyi hesaplar (tahmini süre olarak)"""
        return math.sqrt((self.x - hedef.x) ** 2 + (self.y - hedef.y) ** 2)

class MetroAgi:
    def __init__(self):
        self.istasyonlar: Dict[str, Istasyon] = {}
        self.hatlar: Dict[str, List[Istasyon]] = defaultdict(list)

    def istasyon_ekle(self, idx: str, ad: str, hat: str, x: float, y: float) -> None:
        if idx not in self.istasyonlar:
            istasyon = Istasyon(idx, ad, hat, x, y)
            self.istasyonlar[idx] = istasyon
            self.hatlar[hat].append(istasyon)

    def baglanti_ekle(self, istasyon1_id: str, istasyon2_id: str, sure: int) -> None:
        istasyon1 = self.istasyonlar[istasyon1_id]
        istasyon2 = self.istasyonlar[istasyon2_id]
        istasyon1.komsu_ekle(istasyon2, sure)
        istasyon2.komsu_ekle(istasyon1, sure)

    def en_az_aktarma_bul(self, baslangic_id: str, hedef_id: str) -> Optional[List[Istasyon]]:
        """BFS algoritması kullanarak en az aktarmalı rotayı bulur"""
        if baslangic_id not in self.istasyonlar or hedef_id not in self.istasyonlar:
            return None

        baslangic = self.istasyonlar[baslangic_id]
        hedef = self.istasyonlar[hedef_id]

        kuyruk = deque([(baslangic, [baslangic])])
        ziyaret_edildi = {baslangic}

        while kuyruk:
            mevcut_istasyon, rota = kuyruk.popleft()

            if mevcut_istasyon == hedef:
                return rota

            for komsu, _ in mevcut_istasyon.komsular:
                if komsu not in ziyaret_edildi:
                    ziyaret_edildi.add(komsu)
                    yeni_rota = rota + [komsu]
                    kuyruk.append((komsu, yeni_rota))

        return None

    def en_hizli_rota_bul(self, baslangic_id: str, hedef_id: str) -> Optional[Tuple[List[Istasyon], int]]:
        """A* algoritması kullanarak en hızlı rotayı bulur"""
        if baslangic_id not in self.istasyonlar or hedef_id not in self.istasyonlar:
            return None

        baslangic = self.istasyonlar[baslangic_id]
        hedef = self.istasyonlar[hedef_id]

        # Öncelik kuyruğu: (f_skoru, g_skoru, id, istasyon, rota)
        pq = [(0, 0, id(baslangic), baslangic, [baslangic])]
        heapq.heapify(pq)

        ziyaret_edildi = set()
        g_skorlari = {baslangic: 0}  # Başlangıçtan itibaren gerçek maliyet

        while pq:
            f_skoru, g_skoru, _, mevcut_istasyon, rota = heapq.heappop(pq)

            if mevcut_istasyon == hedef:
                return (rota, g_skoru)

            if mevcut_istasyon in ziyaret_edildi:
                continue

            ziyaret_edildi.add(mevcut_istasyon)

            for komsu, sure in mevcut_istasyon.komsular:
                if komsu not in ziyaret_edildi:
                    yeni_g_skoru = g_skoru + sure
                    h_skoru = komsu.heuristik(hedef)  # Heuristik hesaplama
                    f_skoru = yeni_g_skoru + h_skoru

                    if komsu not in g_skorlari or yeni_g_skoru < g_skorlari[komsu]:
                        g_skorlari[komsu] = yeni_g_skoru
                        yeni_rota = rota + [komsu]
                        heapq.heappush(pq, (f_skoru, yeni_g_skoru, id(komsu), komsu, yeni_rota))

        return None

# Örnek Kullanım
if __name__ == "__main__":
    metro = MetroAgi()

    # İstasyonlar ekleme (x, y koordinatlarıyla)
    # Kırmızı Hat
    metro.istasyon_ekle("K1", "Kızılay", "Kırmızı Hat", 0, 0)
    metro.istasyon_ekle("K2", "Ulus", "Kırmızı Hat", 0, 4)
    metro.istasyon_ekle("K3", "Demetevler", "Kırmızı Hat", 0, 10)
    metro.istasyon_ekle("K4", "OSB", "Kırmızı Hat", 0, 18)

    # Mavi Hat
    metro.istasyon_ekle("M1", "AŞTİ", "Mavi Hat", -5, 0)
    metro.istasyon_ekle("M2", "Kızılay", "Mavi Hat", 0, 0)  # Aktarma noktası
    metro.istasyon_ekle("M3", "Sıhhiye", "Mavi Hat", 3, 0)
    metro.istasyon_ekle("M4", "Gar", "Mavi Hat", 7, 0)

    # Turuncu Hat
    metro.istasyon_ekle("T1", "Batıkent", "Turuncu Hat", -5, 10)
    metro.istasyon_ekle("T2", "Demetevler", "Turuncu Hat", 0, 10)  # Aktarma noktası
    metro.istasyon_ekle("T3", "Gar", "Turuncu Hat", 7, 0)  # Aktarma noktası
    metro.istasyon_ekle("T4", "Keçiören", "Turuncu Hat", 7, 5)

    # Bağlantılar ekleme
    # Kırmızı Hat bağlantıları
    metro.baglanti_ekle("K1", "K2", 4)  # Kızılay -> Ulus
    metro.baglanti_ekle("K2", "K3", 6)  # Ulus -> Demetevler
    metro.baglanti_ekle("K3", "K4", 8)  # Demetevler -> OSB

    # Mavi Hat bağlantıları
    metro.baglanti_ekle("M1", "M2", 5)  # AŞTİ -> Kızılay
    metro.baglanti_ekle("M2", "M3", 3)  # Kızılay -> Sıhhiye
    metro.baglanti_ekle("M3", "M4", 4)  # Sıhhiye -> Gar

    # Turuncu Hat bağlantıları
    metro.baglanti_ekle("T1", "T2", 7)  # Batıkent -> Demetevler
    metro.baglanti_ekle("T2", "T3", 9)  # Demetevler -> Gar
    metro.baglanti_ekle("T3", "T4", 5)  # Gar -> Keçiören

    # Hat aktarma bağlantıları
    metro.baglanti_ekle("K1", "M2", 2)  # Kızılay aktarma
    metro.baglanti_ekle("K3", "T2", 3)  # Demetevler aktarma
    metro.baglanti_ekle("M4", "T3", 2)  # Gar aktarma

    # Test senaryoları
    print("\n=== Test Senaryoları ===")

    # Senaryo 1: AŞTİ'den OSB'ye
    print("\n1. AŞTİ'den OSB'ye:")
    rota = metro.en_az_aktarma_bul("M1", "K4")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("M1", "K4")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))

    # Senaryo 2: Batıkent'ten Keçiören'e
    print("\n2. Batıkent'ten Keçiören'e:")
    rota = metro.en_az_aktarma_bul("T1", "T4")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("T1", "T4")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))

    # Senaryo 3: Keçiören'den AŞTİ'ye
    print("\n3. Keçiören'den AŞTİ'ye:")
    rota = metro.en_az_aktarma_bul("T4", "M1")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("T4", "M1")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))